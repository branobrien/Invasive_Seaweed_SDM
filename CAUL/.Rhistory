writeRaster(predict.caul.cc,
filename = 'CAUL/predict.caul.cc.full.asc',
format='ascii')
predict.caul.thresh.cc <- predict.caul.cc
predict.caul.thresh.cc[predict.caul.thresh.cc < 0.523] <- NA # this value changes by species
ggplot() +
layer_spatial(predict.caul.thresh.cc)
writeRaster(predict.caul.thresh.cc,
filename = 'CAUL/predict.caul.thresh.cc.asc',
formatt= 'ascii')
# note - maxent function won't take the raw occurrence data, it wants a dataframe with only 2 columns.
# Also, needs to be in Long, Latt order or else it messes up.
occur.codi <- read.csv('CODI/CODI Occur/codi_clip_max.csv', header=T)
head(occur.codi)
occur.codi <- as.data.frame(occur.codi)
# bringing in all environmental raster layers and getting them  trimmed and set up
# building raster'bricks' which are just collections of layers in same extent
# bricks are like stacks but apparently faster to work with.
## all envi layers
## these have been trimmed down in arcGIS to only the 100km belt along the coastlines
SST.max <- raster('Environmental Data/Clipped_100km/e08.SST.max.asc')
SST.min <- raster('Environmental Data/Clipped_100km/e09.SST.min.asc')
SST.ran <- raster('Environmental Data/Clipped_100km/e10.SST.ra.asc')
SAL.men <- raster('Environmental Data/Clipped_100km/e07.SAL.me.asc')
NIT.max <- raster('Environmental Data/Clipped_100km/e03.NIT.max.asc')
NIT.min <- raster('Environmental Data/Clipped_100km/e04.NIT.min.asc')
PHO.max <- raster('Environmental Data/Clipped_100km/e05.PHO.max.asc')
PHO.min <- raster('Environmental Data/Clipped_100km/e06.PHO.min.asc')
DA.max <- raster('Environmental Data/Clipped_100km/e01.DA.max.asc')
DA.min <- raster('Environmental Data/Clipped_100km/e02.DA.min.asc')
## NOtes
# Brezo had a lot to say about using DA as a variable - maybe I should just remove it from the start?
# Also said it may be worth it to include all the temp vars, max and min
# even if somewhat correlated
# need to trim off edges to make sure extents are all the same
ext.global.trim <- extent(c(-180,180,-65,65))
SST.max <- crop(SST.max, ext.global.trim)
SST.min <- crop(SST.min, ext.global.trim)
SST.ran <- crop(SST.ran, ext.global.trim)
SAL.men <- crop(SAL.men, ext.global.trim)
NIT.max <- crop(NIT.max, ext.global.trim)
NIT.min <- crop(NIT.min, ext.global.trim)
PHO.max <- crop(PHO.max, ext.global.trim)
PHO.min <- crop(PHO.min, ext.global.trim)
DA.max <- crop(DA.max, ext.global.trim)
DA.min <- crop(DA.min, ext.global.trim)
#not using DA on Brezo's suggestions
envi.global <- stack(c(SST.max,
SST.min,
SST.ran,
SAL.men,
NIT.max,
NIT.min,
PHO.max,
PHO.min))
# DA.max,
# DA.min))
#### model FINAL
# copy-paste of Model 3 - putting Salinity back in, removing it casued AUC to start declining
envi.global.final <- stack(c(SST.max,
SST.min,
# SST.ran,
SAL.men,
# NIT.max,
# NIT.min,
PHO.max))
# PHO.min))
# DA.max,
# DA.min))
codi.max.final <- maxent(x = envi.global.final,
p = occur.codi,
path="CODI/Maxent outputs/codi.max.final",
args=c('linear=TRUE',
'quadratic=TRUE',
'product=FALSE',
'threshold=FALSE',
'hinge=FALSE',
'randomtestpoints=30',
'responsecurves=TRUE',
'jackknife=TRUE'))
# read in files
SST.max.RCP45 <- raster('Environmental Data/RCP45/e08.SST.max.asc')
# read in files
SST.max.RCP45 <- raster('Environmental Data/RCP45/e08.SST.max.asc')
SST.min.RCP45 <- raster('Environmental Data/RCP45/e09.SST.min.asc')
SST.max.RCP45 <- crop(SST.max.RCP45, ext.global.trim)
SST.min.RCP45 <- crop(SST.min.RCP45, ext.global.trim)
envi.global.cc <- stack(c(SST.max,
SST.min,
# SST.ran,
SAL.men,
# NIT.max,
# NIT.min,
PHO.max))
predict.codi.cc <- predict(codi.max.final, envi.global.cc)
ggplot() +
layer_spatial(predict.codi.cc)
#save as raster for plotting in arcmap
writeRaster(predict.codi.cc,
filename = 'CODI/predict.codi.cc.full.asc',
format='ascii')
predict.codi.thresh.cc <- predict.codi.cc
predict.codi.thresh.cc[predict.codi.thresh.cc < 0.330] <- NA # this value changes by species
ggplot() +
layer_spatial(predict.codi.thresh.cc)
writeRaster(predict.codi.thresh.cc,
filename = 'CAUL/predict.caul.thresh.cc.asc',
formatt= 'ascii')
writeRaster(predict.codi.thresh.cc,
filename = 'CODI/predict.codi.thresh.cc.asc',
formatt= 'ascii')
# note - maxent function won't take the raw occurrence data, it wants a dataframe with only 2 columns.
# Also, needs to be in Long, Latt order or else it messes up.
occur.dasy <- read.csv('DASY/DASY Occur/Dasy Maxent V4.csv', header=T)
head(occur.dasy)
occur.dasy <- as.data.frame(occur.dasy)
# note - maxent function won't take the raw occurrence data, it wants a dataframe with only 2 columns.
# Also, needs to be in Long, Latt order or else it messes up.
occur.dasy <- read.csv('DASY/DASY Occur/Dasy Maxent V4.csv', header=T)
head(occur.dasy)
occur.dasy <- as.data.frame(occur.dasy)
# bringing in all environmental raster layers and getting them  trimmed and set up
# building raster'bricks' which are just collections of layers in same extent
# bricks are like stacks but apparently faster to work with.
## all envi layers
## these have been trimmed down in arcGIS to only the 100km belt along the coastlines
SST.max <- raster('Environmental Data/Clipped_100km/e08.SST.max.asc')
SST.min <- raster('Environmental Data/Clipped_100km/e09.SST.min.asc')
SST.ran <- raster('Environmental Data/Clipped_100km/e10.SST.ra.asc')
SAL.men <- raster('Environmental Data/Clipped_100km/e07.SAL.me.asc')
NIT.max <- raster('Environmental Data/Clipped_100km/e03.NIT.max.asc')
NIT.min <- raster('Environmental Data/Clipped_100km/e04.NIT.min.asc')
PHO.max <- raster('Environmental Data/Clipped_100km/e05.PHO.max.asc')
PHO.min <- raster('Environmental Data/Clipped_100km/e06.PHO.min.asc')
DA.max <- raster('Environmental Data/Clipped_100km/e01.DA.max.asc')
DA.min <- raster('Environmental Data/Clipped_100km/e02.DA.min.asc')
## NOtes
# Brezo had a lot to say about using DA as a variable - maybe I should just remove it from the start?
# Also said it may be worth it to include all the temp vars, max and min
# even if somewhat correlated
# need to trim off edges to make sure extents are all the same
ext.global.trim <- extent(c(-180,180,-65,65))
SST.max <- crop(SST.max, ext.global.trim)
SST.min <- crop(SST.min, ext.global.trim)
SST.ran <- crop(SST.ran, ext.global.trim)
SAL.men <- crop(SAL.men, ext.global.trim)
NIT.max <- crop(NIT.max, ext.global.trim)
NIT.min <- crop(NIT.min, ext.global.trim)
PHO.max <- crop(PHO.max, ext.global.trim)
PHO.min <- crop(PHO.min, ext.global.trim)
DA.max <- crop(DA.max, ext.global.trim)
DA.min <- crop(DA.min, ext.global.trim)
#not using DA on Brezo's suggestions
envi.global <- stack(c(SST.max,
SST.min,
SST.ran,
SAL.men,
NIT.max,
NIT.min,
PHO.max,
PHO.min))
# DA.max,
# DA.min))
envi.global.final <- stack(c(SST.max,
SST.min,
# SST.ran,
SAL.men,
# NIT.max,
# NIT.min,
# PHO.max,
PHO.min))
# DA.max,
# DA.min))
dasy.max.final <- maxent(x = envi.global.final,
p = occur.dasy,
path="DASY/Maxent outputs/dasy.max.final",
args=c('linear=TRUE',
'quadratic=TRUE',
'product=FALSE',
'threshold=FALSE',
'hinge=FALSE',
'randomtestpoints=30',
'responsecurves=TRUE',
'jackknife=TRUE'))
envi.global.cc <- stack(c(SST.max,
SST.min,
# SST.ran,
SAL.men,
# NIT.max,
# NIT.min,
# PHO.max,
PHO.min))
predict.dasy.cc <- predict(dasy.max.final, envi.global.cc)
ggplot() +
layer_spatial(predict.dasy.cc)
#save as raster for plotting in arcmap
writeRaster(predict.dasy.cc,
filename = 'DASY/predict.dasy.cc.full.asc',
format='ascii')
predict.dasy.thresh.cc <- predict.dasy.cc
predict.dasy.thresh.cc[predict.dasy.thresh.cc < 0.417] <- NA # this value changes by species
ggplot() +
layer_spatial(predict.dasy.thresh.cc)
writeRaster(predict.dasy.thresh.cc,
filename = 'DASY/predict.dasy.thresh.cc.asc',
formatt= 'ascii')
# note - maxent function won't take the raw occurrence data, it wants a dataframe with only 2 columns.
# Also, needs to be in Long, Latt order or else it messes up.
occur.sarg <- read.csv('SARG/SARG Occur/Sarg max 2.csv', header=T)
head(occur.sarg)
occur.sarg <- as.data.frame(occur.sarg)
# bringing in all environmental raster layers and getting them  trimmed and set up
# building raster'bricks' which are just collections of layers in same extent
# bricks are like stacks but apparently faster to work with.
## all envi layers
## these have been trimmed down in arcGIS to only the 100km belt along the coastlines
SST.max <- raster('Environmental Data/Clipped_100km/e08.SST.max.asc')
SST.min <- raster('Environmental Data/Clipped_100km/e09.SST.min.asc')
SST.ran <- raster('Environmental Data/Clipped_100km/e10.SST.ra.asc')
SAL.men <- raster('Environmental Data/Clipped_100km/e07.SAL.me.asc')
NIT.max <- raster('Environmental Data/Clipped_100km/e03.NIT.max.asc')
NIT.min <- raster('Environmental Data/Clipped_100km/e04.NIT.min.asc')
PHO.max <- raster('Environmental Data/Clipped_100km/e05.PHO.max.asc')
PHO.min <- raster('Environmental Data/Clipped_100km/e06.PHO.min.asc')
DA.max <- raster('Environmental Data/Clipped_100km/e01.DA.max.asc')
DA.min <- raster('Environmental Data/Clipped_100km/e02.DA.min.asc')
## NOtes
# Brezo had a lot to say about using DA as a variable - maybe I should just remove it from the start?
# Also said it may be worth it to include all the temp vars, max and min
# even if somewhat correlated
# need to trim off edges to make sure extents are all the same
ext.global.trim <- extent(c(-180,180,-65,65))
SST.max <- crop(SST.max, ext.global.trim)
SST.min <- crop(SST.min, ext.global.trim)
SST.ran <- crop(SST.ran, ext.global.trim)
SAL.men <- crop(SAL.men, ext.global.trim)
NIT.max <- crop(NIT.max, ext.global.trim)
NIT.min <- crop(NIT.min, ext.global.trim)
PHO.max <- crop(PHO.max, ext.global.trim)
PHO.min <- crop(PHO.min, ext.global.trim)
DA.max <- crop(DA.max, ext.global.trim)
DA.min <- crop(DA.min, ext.global.trim)
#not using DA on Brezo's suggestions
envi.global <- stack(c(SST.max,
SST.min,
SST.ran,
SAL.men,
NIT.max,
NIT.min,
PHO.max,
PHO.min))
# DA.max,
# DA.min))
#### model FINAL
# remove NIT
envi.global.final <- stack(c(SST.max,
SST.min,
# SST.ran,
SAL.men))
# NIT.max,
# NIT.min))
# PHO.max,
# PHO.min))
# DA.max,
# DA.min))
sarg.max.final <- maxent(x = envi.global.final,
p = occur.sarg,
path="SARG/Maxent outputs/sarg.max.final",
args=c('linear=TRUE',
'quadratic=TRUE',
'product=FALSE',
'threshold=FALSE',
'hinge=FALSE',
'randomtestpoints=30',
'responsecurves=TRUE',
'jackknife=TRUE'))
# read in files
SST.max.RCP45 <- raster('Environmental Data/RCP45/e08.SST.max.asc')
# read in files
SST.max.RCP45 <- raster('Environmental Data/RCP45/e08.SST.max.asc')
SST.min.RCP45 <- raster('Environmental Data/RCP45/e09.SST.min.asc')
# read in files
SST.max.RCP45 <- raster('Environmental Data/RCP45/e08.SST.max.asc')
SST.min.RCP45 <- raster('Environmental Data/RCP45/e09.SST.min.asc')
# trim to same extents as other vars
SST.max.RCP45 <- crop(SST.max.RCP45, ext.global.trim)
# trim to same extents as other vars
SST.max.RCP45 <- crop(SST.max.RCP45, ext.global.trim)
SST.min.RCP45 <- crop(SST.min.RCP45, ext.global.trim)
envi.global.cc <-  stack(c(SST.max.RCP45,
SST.min.RCP45,
# SST.ran,
SAL.men))
envi.global.cc <-  stack(c(SST.max.RCP45,
SST.min.RCP45,
# SST.ran,
SAL.men))
predict.sarg.cc <- predict(sarg.max.final, envi.global.cc)
ggplot() +
layer_spatial(predict.sarg.cc)
#save as raster for plotting in arcmap
writeRaster(predict.sarg.cc,
filename = 'SARG/predict.sarg.cc.full.asc',
format='ascii')
predict.sarg.thresh.cc <- predict.sarg.cc
predict.sarg.thresh.cc[predict.sarg.thresh.cc < 0.284] <- NA # this value changes by species
ggplot() +
layer_spatial(predict.sarg.thresh.cc)
writeRaster(predict.sarg.thresh.cc,
filename = 'DASY/predict.dasy.thresh.cc.asc',
formatt= 'ascii')
writeRaster(predict.sarg.thresh.cc,
filename = 'SARG/predict.sarg.thresh.cc.asc',
formatt= 'ascii')
# note - maxent function won't take the raw occurrence data, it wants a dataframe with only 2 columns.
# Also, needs to be in Long, Latt order or else it messes up.
occur.unda <- read.csv('UNDA/UNDA Occur/Unda max.csv', header=T)
head(occur.unda)
occur.unda <- as.data.frame(occur.unda)
# need to bring in environmental layers for SST max and min under RCP45 scenario
# read in files
SST.max.RCP45 <- raster('Environmental Data/RCP45/e08.SST.max.asc')
SST.min.RCP45 <- raster('Environmental Data/RCP45/e09.SST.min.asc')
# trim to same extents as other vars
SST.max.RCP45 <- crop(SST.max.RCP45, ext.global.trim)
SST.min.RCP45 <- crop(SST.min.RCP45, ext.global.trim)
envi.global.cc <-  stack(c(SST.max.RCP45,
SST.min.RCP45,
# SST.ran,
# SAL.men,
# NIT.max,
NIT.min))
predict.unda.cc <- predict(unda.max.final, envi.global.cc)
envi.global.final <- stack(c(SST.max,
SST.min,
# SST.ran,
# SAL.men,
# NIT.max,
NIT.min))
unda.max.final <- maxent(x = envi.global.final,
p = occur.unda,
path="UNDA/Maxent outputs/unda.max.4",
args=c('linear=TRUE',
'quadratic=TRUE',
'product=FALSE',
'threshold=FALSE',
'hinge=FALSE',
'randomtestpoints=30',
'responsecurves=TRUE',
'jackknife=TRUE'))
envi.global.cc <-  stack(c(SST.max.RCP45,
SST.min.RCP45,
# SST.ran,
# SAL.men,
# NIT.max,
NIT.min))
predict.unda.cc <- predict(unda.max.final, envi.global.cc)
ggplot() +
layer_spatial(predict.unda.cc)
#save as raster for plotting in arcmap
writeRaster(predict.unda.cc,
filename = 'UNDA/predict.unda.cc.full.asc',
format='ascii')
predict.unda.thresh.cc <- predict.unda.cc
predict.unda.thresh.cc[predict.unda.thresh.cc < 0.284] <- NA # this value changes by species
#save as raster for plotting in arcmap
writeRaster(predict.unda.cc,
filename = 'UNDA/predict.unda.cc.full.asc',
format='ascii')
writeRaster(predict.unda.thresh.cc,
filename = 'UNDA/predict.unda.thresh.cc.asc',
formatt= 'ascii')
envi.global.cc <- stack(c(SST.max,
SST.min,
# SST.ran,
SAL.men,
# NIT.max,
# NIT.min,
PHO.max))
predict.codi.cc <- predict(codi.max.final, envi.global.cc)
envi.global.final <- stack(c(SST.max,
SST.min,
# SST.ran,
SAL.men,
# NIT.max,
# NIT.min,
PHO.max))
codi.max.final <- maxent(x = envi.global.final,
p = occur.codi,
path="CODI/Maxent outputs/codi.max.final",
args=c('linear=TRUE',
'quadratic=TRUE',
'product=FALSE',
'threshold=FALSE',
'hinge=FALSE',
'randomtestpoints=30',
'responsecurves=TRUE',
'jackknife=TRUE'))
occur.codi <- read.csv('CODI/CODI Occur/codi_clip_max.csv', header=T)
head(occur.codi)
occur.codi <- as.data.frame(occur.codi)
codi.max.final <- maxent(x = envi.global.final,
p = occur.codi,
path="CODI/Maxent outputs/codi.max.final",
args=c('linear=TRUE',
'quadratic=TRUE',
'product=FALSE',
'threshold=FALSE',
'hinge=FALSE',
'randomtestpoints=30',
'responsecurves=TRUE',
'jackknife=TRUE'))
envi.global.cc <- stack(c(SST.max,
SST.min,
# SST.ran,
SAL.men,
# NIT.max,
# NIT.min,
PHO.max))
envi.global.cc <- stack(c(SST.max.RCP45,
SST.min.RCP45,
# SST.ran,
SAL.men,
# NIT.max,
# NIT.min,
PHO.max))
predict.codi.cc <- predict(codi.max.final, envi.global.cc)
ggplot() +
layer_spatial(predict.codi.cc)
#save as raster for plotting in arcmap
writeRaster(predict.codi.cc,
filename = 'CODI/predict.codi.cc.full.asc',
format='ascii')
#save as raster for plotting in arcmap
writeRaster(predict.codi.cc,
filename = 'CODI/predict.codi.cc.full.2.asc',
format='ascii')
predict.codi.thresh.cc <- predict.codi.cc
predict.codi.thresh.cc[predict.codi.thresh.cc < 0.330] <- NA # this value changes by species
ggplot() +
layer_spatial(predict.codi.thresh.cc)
writeRaster(predict.codi.thresh.cc,
filename = 'CODI/predict.codi.thresh.cc.asc',
formatt= 'ascii',
overwrite = TRUE)
envi.global.cc <- stack(c(SST.max.RCP45,
SST.min.RCP45,
# SST.ran,
SAL.men,
# NIT.max,
# NIT.min,
# PHO.max,
PHO.min))
envi.global.final <- stack(c(SST.max,
SST.min,
# SST.ran,
SAL.men,
# NIT.max,
# NIT.min,
# PHO.max,
PHO.min))
dasy.max.final <- maxent(x = envi.global.final,
p = occur.dasy,
path="DASY/Maxent outputs/dasy.max.final",
args=c('linear=TRUE',
'quadratic=TRUE',
'product=FALSE',
'threshold=FALSE',
'hinge=FALSE',
'randomtestpoints=30',
'responsecurves=TRUE',
'jackknife=TRUE'))
occur.dasy <- read.csv('DASY/DASY Occur/Dasy Maxent V4.csv', header=T)
head(occur.dasy)
occur.dasy <- as.data.frame(occur.dasy)
dasy.max.final <- maxent(x = envi.global.final,
p = occur.dasy,
path="DASY/Maxent outputs/dasy.max.final",
args=c('linear=TRUE',
'quadratic=TRUE',
'product=FALSE',
'threshold=FALSE',
'hinge=FALSE',
'randomtestpoints=30',
'responsecurves=TRUE',
'jackknife=TRUE'))
envi.global.cc <- stack(c(SST.max.RCP45,
SST.min.RCP45,
# SST.ran,
SAL.men,
# NIT.max,
# NIT.min,
# PHO.max,
PHO.min))
predict.dasy.cc <- predict(dasy.max.final, envi.global.cc)
predict.dasy.thresh.cc <- predict.dasy.cc
predict.dasy.thresh.cc[predict.dasy.thresh.cc < 0.417] <- NA # this value changes by species
ggplot() +
layer_spatial(predict.dasy.cc)
#save as raster for plotting in arcmap
writeRaster(predict.dasy.cc,
filename = 'DASY/predict.dasy.cc.full.asc',
format='ascii',
overwrite = TRUE)
predict.dasy.thresh.cc <- predict.dasy.cc
predict.dasy.thresh.cc[predict.dasy.thresh.cc < 0.417] <- NA # this value changes by species
ggplot() +
layer_spatial(predict.dasy.thresh.cc)
writeRaster(predict.dasy.thresh.cc,
filename = 'DASY/predict.dasy.thresh.cc.asc',
formatt= 'ascii',
overwrite = TRUE)
